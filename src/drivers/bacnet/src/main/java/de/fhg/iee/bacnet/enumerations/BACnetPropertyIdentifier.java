/**
 * Copyright 2011-2018 Fraunhofer-Gesellschaft zur FÃ¶rderung der angewandten Wissenschaften e.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.fhg.iee.bacnet.enumerations;

import de.fhg.iee.bacnet.api.BACnetEnumeration;

/**
 *
 * @author jlapp
 */
public enum BACnetPropertyIdentifier implements BACnetEnumeration {
    accepted_modes(175),
    acked_transitions(0),
    ack_required(1),
    action(2),
    action_text(3),
    active_text(4),
    active_vt_sessions(5),
    active_cov_subscriptions(152),
    actual_shed_level(212),
    adjust_value(176),
    alarm_value(6),
    alarm_values(7),
    align_intervals(193),
    all(8),
    all_writes_successful(9),
    apdu_segment_timeout(10),
    apdu_timeout(11),
    application_software_version(12),
    archive(13),
    attempted_samples(124),
    auto_slave_discovery(169),
    average_value(125),
    backup_failure_timeout(153),
    bias(14),
    buffer_size(126),
    change_of_state_count(15),
    change_of_state_time(16),
    client_cov_increment(127),
    configuration_files(154),
    controlled_variable_reference(19),
    controlled_variable_units(20),
    controlled_variable_value(21),
    count(177),
    count_before_change(178),
    count_change_time(179),
    cov_increment(22),
    cov_period(180),
    cov_resubscription_interval(128),
    current_command_priority(431),
    database_revision(155),
    date_list(23),
    daylight_savings_status(24),
    deadband(25),
    derivative_constant(26),
    derivative_constant_units(27),
    description(28),
    description_of_halt(29),
    device_address_binding(30),
    device_type(31),
    direct_reading(156),
    door_alarm_state(226),
    door_extended_pulse_time(227),
    door_members(228),
    door_open_too_long_time(229),
    door_pulse_time(230),
    door_status(231),
    door_unlock_delay_time(232),
    duty_window(213),
    effective_period(32),
    elapsed_active_time(33),
    enable(133),
    error_limit(34),
    event_enable(35),
    event_state(36),
    event_time_stamps(130),
    event_type(37),
    event_parameters(83),
    exception_schedule(38),
    expected_shed_level(214),
    fault_values(39),
    feedback_value(40),
    file_access_method(41),
    file_size(42),
    file_type(43),
    firmware_revision(44),
    full_duty_baseline(215),
    high_limit(45),
    inactive_text(46),
    in_process(47),
    input_reference(181),
    instance_of(48),
    integral_constant(49),
    integral_constant_units(50),
    interval_offset(195),
    last_notify_record(173),
    last_restart_reason(196),
    last_restore_time(157),
    life_safety_alarm_values(166),
    limit_enable(52),
    limit_monitoring_interval(182),
    list_of_group_members(53),
    list_of_object_property_references(54),
    list_of_session_keys(55),
    local_date(56),
    local_time(57),
    location(58),
    lock_status(233),
    log_buffer(131),
    log_device_object_property(132),
    log_interval(134),
    logging_object(183),
    logging_record(184),
    logging_type(197),
    low_limit(59),
    maintenance_required(158),
    manipulated_variable_reference(60),
    manual_slave_address_binding(170),
    masked_alarm_values(234),
    maximum_output(61),
    maximum_value(135),
    maximum_value_timestamp(149),
    max_apdu_length_accepted(62),
    max_info_frames(63),
    max_master(64),
    max_pres_value(65),
    max_segments_accepted(167),
    member_of(159),
    member_status_flags(347),
    minimum_off_time(66),
    minimum_on_time(67),
    minimum_output(68),
    minimum_value(136),
    minimum_value_timestamp(150),
    min_pres_value(69),
    mode(160),
    model_name(70),
    modification_date(71),
    node_subtype(207),
    node_type(208),
    notification_class(17),
    notification_threshold(137),
    notify_type(72),
    number_of_APDU_retries(73),
    number_of_states(74),
    object_identifier(75),
    object_list(76),
    object_name(77),
    object_property_reference(78),
    object_type(79),
    operation_expected(161),
    optional(80),
    out_of_service(81),
    output_units(82),
    polarity(84),
    prescale(185),
    present_value(85),
    priority(86),
    pulse_rate(186),
    priority_array(87),
    priority_for_writing(88),
    process_identifier(89),
    profile_name(168),
    program_change(90),
    program_location(91),
    program_state(92),
    property_list(371),
    proportional_constant(93),
    proportional_constant_units(94),
    protocol_object_types_supported(96),
    protocol_revision(139),
    protocol_services_supported(97),
    protocol_version(98),
    read_only(99),
    reason_for_halt(100),
    recipient_list(102),
    records_since_notification(140),
    record_count(141),
    reliability(103),
    relinquish_default(104),
    requested_shed_level(218),
    required(105),
    resolution(106),
    restart_notification_recipients(202),
    scale(187),
    scale_factor(188),
    schedule_default(174),
    secured_status(235),
    segmentation_supported(107),
    setpoint(108),
    setpoint_reference(109),
    setting(162),
    shed_duration(219),
    shed_level_descriptions(220),
    shed_levels(221),
    silenced(163),
    slave_address_binding(171),
    slave_proxy_enable(172),
    start_time(142),
    state_text(110),
    status_flags(111),
    stop_time(143),
    stop_when_full(144),
    structured_object_list(209),
    subordinate_annotations(210),
    subordinate_list(211),
    system_status(112),
    time_delay(113),
    time_of_active_time_reset(114),
    time_of_device_restart(203),
    time_of_state_count_reset(115),
    time_synchronization_interval(204),
    time_synchronization_recipients(116),
    total_record_count(145),
    tracking_value(164),
    trigger(205),
    units(117),
    update_interval(118),
    update_time(189),
    utc_offset(119),
    utc_time_synchronization_recipients(206),
    valid_samples(146),
    value_before_change(190),
    value_set(191),
    value_change_time(192),
    variance_value(151),
    vendor_identifier(120),
    vendor_name(121),
    vt_classes_supported(122),
    weekly_schedule(123),
    window_interval(147),
    window_samples(148),
    zone_members(165);

    public final int code;

    private BACnetPropertyIdentifier(int code) {
        this.code = code;
    }
    
    @Override
    public int getBACnetEnumValue() {
        return code;
    }
    
    public static BACnetPropertyIdentifier forEnumValue(int val) {
        for (BACnetPropertyIdentifier o: values()) {
            if (val == o.getBACnetEnumValue()){
                return o;
            }
        }
        throw new IllegalArgumentException("unknown enum value: " + val);
    }

}
