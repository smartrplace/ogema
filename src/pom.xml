<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.ogema</groupId>
	<artifactId>ogema</artifactId>
	<version>2.2.2-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>OGEMA</name>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven-source-plugin.version>3.0.1</maven-source-plugin.version>
		<maven-javadoc-plugin.version>3.5.0</maven-javadoc-plugin.version>
		<!-- max versions exclusive -->
		<guava.version.min>19.0</guava.version.min>
		<guava.version.max>31.0</guava.version.max>
		<felix.service.command.version.min>0.0.0</felix.service.command.version.min>
		<felix.service.command.version.max>2.0.0</felix.service.command.version.max>
		<lang3.version.min>3.4</lang3.version.min>
		<lang3.version.max>4.0</lang3.version.max>
		<org.json.version.min>20160212</org.json.version.min>
		<org.json.version.max>20201116</org.json.version.max>
		<jackson.version>2.9.10</jackson.version>
		<jackson.databind.version>2.9.10.8</jackson.databind.version>
	</properties>

	<scm>
		<connection>scm:ssh:git@github.com:smartrplace/ogema.git</connection>
		<developerConnection>scm:git:ssh:git@github.com:smartrplace/ogema.git</developerConnection>
		<url>scm:ssh:git@github.com:smartrplace/ogema.git</url>
  </scm>

    <distributionManagement>
        <repository>
            <uniqueVersion>false</uniqueVersion>
            <id>sp-central</id>
            <name>Smartrplace Repository</name>
            <url>https://repository.smartrplace.de/artifactory/libs-release</url>
            <layout>default</layout>
        </repository>
        <snapshotRepository>
            <uniqueVersion>true</uniqueVersion>
            <id>sp-snapshots</id>
            <name>Smartrplace Snapshots</name>
            <url>https://repository.smartrplace.de/artifactory/libs-snapshot</url>
            <layout>default</layout>
        </snapshotRepository>
    </distributionManagement>
	

	<pluginRepositories>
		<!-- Repository for the Header Tool -->
		<pluginRepository>
			<id>mc-release</id>
			<name>Local Maven repository of releases</name>
			<url>http://mc-repo.googlecode.com/svn/maven2/releases</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<releases>
				<enabled>true</enabled>
			</releases>
		</pluginRepository>
	</pluginRepositories>

	<!-- Dependency Management: These are project-global settings for default 
		versions. -->
	<dependencyManagement>
		<dependencies>

			<!-- OSGi -->
			<dependency>
				<groupId>org.osgi</groupId>
				<artifactId>org.osgi.core</artifactId>
				<version>5.0.0</version>
                <scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.osgi</groupId>
				<artifactId>org.osgi.compendium</artifactId>
				<version>5.0.0</version>
                <scope>compile</scope>
			</dependency>

			<!-- OGEMA API -->
			<dependency>
				<groupId>org.ogema.core</groupId>
				<artifactId>api</artifactId>
				<version>2.2.2-SNAPSHOT</version>
			</dependency>
			<dependency>
				<groupId>org.ogema.core</groupId>
				<artifactId>models</artifactId>
				<version>2.2.2-SNAPSHOT</version>
			</dependency>

			<!-- OGEMA Reference Implementation -->
			<dependency>
				<groupId>org.ogema.ref-impl</groupId>
				<artifactId>internal-api</artifactId>
				<version>2.2.2-SNAPSHOT</version>
			</dependency>
			<dependency>
				<groupId>org.ogema.ref-impl</groupId>
				<artifactId>persistence</artifactId>
				<version>2.2.2-SNAPSHOT</version>
			</dependency>
			<dependency>
				<groupId>org.ogema.ref-impl</groupId>
				<artifactId>util</artifactId>
				<version>2.2.2-SNAPSHOT</version>
			</dependency>
			<dependency>
				<groupId>org.ogema.ref-impl</groupId>
				<artifactId>ogema-exam-base</artifactId>
				<version>2.2.2-SNAPSHOT</version>
			</dependency>

			<!-- OGEMA Tools and Services -->
			<dependency>
				<groupId>org.ogema.tools</groupId>
				<artifactId>memory-timeseries</artifactId>
				<version>2.2.2-SNAPSHOT</version>
			</dependency>
			<dependency>
				<groupId>org.ogema.tools</groupId>
				<artifactId>resource-manipulators</artifactId>
				<version>2.2.2-SNAPSHOT</version>
			</dependency>
			<dependency>
				<groupId>org.ogema.tools</groupId>
				<artifactId>resource-utils</artifactId>
				<version>2.2.2-SNAPSHOT</version>
			</dependency>

			<!-- Others -->
		<dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.apache.felix.framework</artifactId>
			<version>5.6.10</version>
		</dependency>
        <dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.apache.felix.framework.security</artifactId>
			<version>2.6.0</version>
		</dependency>
        <dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>servlet-api</artifactId>
				<version>2.4</version>
			</dependency>
			<dependency>
				<groupId>org.apache.felix</groupId>
				<artifactId>org.apache.felix.scr.annotations</artifactId>
				<version>1.9.12</version>
			</dependency>
				<dependency>
				<groupId>org.json</groupId>
				<artifactId>json</artifactId>
				<version>20170516</version>
			</dependency>
			<!-- we try to support also version 1.x.x, by specifying
			the import package range in pom.xml files declaring a dependency to this;
			must not build against 1.x.x., though, since this leads to an error in console-scripting -->			
			<dependency>
			    <groupId>org.apache.felix</groupId>
			    <artifactId>org.apache.felix.gogo.runtime</artifactId>
			    <version>1.0.6</version><!-- 0.16.2 vs. 1.0.6 -->
			</dependency>
			<!-- we try to support also versions > 19.0, by specifying
			the import package range in pom.xml files declaring a dependency to this;
			must not build against higher versions, though, since they require Java8 -->	
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>19.0</version>
			</dependency>
			<dependency>
                <groupId>javax.xml.bind</groupId>
                <artifactId>jaxb-api</artifactId>
                <version>2.3.1</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.databind.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.module</groupId>
                <artifactId>jackson-module-jaxb-annotations</artifactId>
                <version>${jackson.version}</version>
            </dependency>
		</dependencies>
	</dependencyManagement>

	<modules>
 		<module>apps</module>
		<module>archetypes</module>
		<module>core</module>
		<module>tools</module>
		<module>drivers</module>
		<module>testapps</module>
		<module>external/org.apache.felix.useradmin.filestore</module>
		<module>external/org.apache.felix.useradmin</module>

	</modules>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>2.4</version>
			</plugin>
			<plugin>
				<groupId>org.apache.servicemix.tooling</groupId>
				<artifactId>depends-maven-plugin</artifactId>
				<version>1.4.0</version>
				<executions>
					<execution>
						<id>generate-depends-file</id>
						<goals>
							<goal>generate-depends-file</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!-- execution order: run scr before manifest and manifest before tests, 
					so that pax exam can use the manifest -->
				<plugin>
					<groupId>org.apache.felix</groupId>
					<artifactId>maven-scr-plugin</artifactId>
					<version>1.26.0</version>
					<configuration>
						<outputDirectory>${project.build.outputDirectory}</outputDirectory>
					</configuration>
					<executions>
						<execution>
							<id>generate-scr-scrdescriptor</id>
							<phase>process-classes</phase>
							<goals>
								<goal>scr</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.felix</groupId>
					<artifactId>maven-bundle-plugin</artifactId>
					<extensions>true</extensions>
					<version>5.1.1</version>
					<executions>
						<execution>
							<id>bundle-manifest</id>
							<phase>generate-test-sources</phase>
							<goals>
								<goal>manifest</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>1.7</source>
						<target>1.7</target>
						<showDeprecation>true</showDeprecation>
						<showWarnings>true</showWarnings>
						<compilerArgs>
							<arg>-Xlint</arg>
						</compilerArgs>
					</configuration>
				</plugin>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.felix</groupId>
										<artifactId>maven-scr-plugin</artifactId>
										<versionRange>[1.0.0,)</versionRange>
										<goals>
											<goal>scr</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnIncremental>true</runOnIncremental>
										</execute>
									</action>
								</pluginExecution>

								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.felix</groupId>
										<artifactId>maven-bundle-plugin</artifactId>
										<versionRange>[0.0,)</versionRange>
										<goals>
											<goal>generate-test-sources</goal>
											<goal>manifest</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnIncremental>true</runOnIncremental>
										</execute>
									</action>
								</pluginExecution>

								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.servicemix.tooling</groupId>
										<artifactId>depends-maven-plugin</artifactId>
										<versionRange>[0.0,)</versionRange>
										<goals>
											<goal>generate-depends-file</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>

								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.googlecode.maven-java-formatter-plugin</groupId>
										<artifactId>maven-java-formatter-plugin</artifactId>
										<versionRange>[0.0,)</versionRange>
										<goals>
											<goal>format</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>

								<!-- license-maven-plugin shouldn't be executed from eclipse-mvn 
									build -> start from console explicitly if needed: mvn find:find license:format 
									OR mvn license:format -Dlicense.header=path/to/header.txt -->
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.mycila</groupId>
										<artifactId>license-maven-plugin</artifactId>
										<versionRange>[1.0,)</versionRange>
										<goals>
											<goal>check</goal>
											<goal>format</goal>
											<goal>remove</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>

							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
				<plugin>
					<groupId>com.googlecode.maven-java-formatter-plugin</groupId>
					<artifactId>maven-java-formatter-plugin</artifactId>
					<version>0.4</version>
					<configuration>
						<configFile>${format.file}</configFile>
						<encoding>UTF-8</encoding>
						<lineEnding>LF</lineEnding>
						<excludes>
							<exclude>**/src/test/**</exclude>
						</excludes>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>format</goal>
							</goals>
							<phase>validate</phase>
						</execution>
					</executions>
				</plugin>

				<!-- Plugin for automatic addition of header to java, html, jsp, .. files. -->
				<plugin>
					<groupId>com.mycila</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>3.0</version>
					<configuration>
                        <!-- see 'mvn com.mycila:license-maven-plugin:help -Ddetail=true' -->
						<header>${license.header}</header>
                        <keywords> <!-- existing license headers contain all of these keywords -->
                            <keyword>OGEMA</keyword>
                            <keyword>GNU</keyword>
                            <keyword>License</keyword>
                        </keywords>
						<properties>
							<year>2018</year>
							<email>info@ogema.org</email>
						</properties>
						<!-- Encoding is actually unused, see http://code.google.com/p/license-maven-plugin/issues/detail?id=115 
							which is not yet patched in the released versions (up to 1.10.0b1). The license 
							plugin will always use the platform encoding when reading the license file, 
							which is usually cp1251 on windows. To override the platform encoding used 
							in maven the system property 'file.encoding' must be set in the environment 
							variable JAVA_TOOL_OPTIONS. set JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8 -->
						<encoding>UTF-8</encoding>

						<includes>
							<include>src/**</include>
							<include>web/**</include>
						</includes>
						<excludes>
							<exclude>lib/**</exclude>
							<exclude>libs/**</exclude>
							<exclude>target/**</exclude>
							<exclude>**/*.txt</exclude>
							<exclude>**/data/**</exclude>
							<exclude>**/MANIFEST.MF</exclude>
							<exclude>**/.project</exclude>
							<exclude>**/.settings</exclude>
							<exclude>**/.classpath</exclude>
							<exclude>**/*.log</exclude>
							<exclude>**/jquery*.js</exclude>
							<!-- for now don't add header to any js or css file because there 
								are a lot of external files we're using where our header would be added ... -->
							<exclude>**/*.js</exclude>
							<exclude>**/*.json</exclude>
							<exclude>**/*.map</exclude>
							<exclude>**/*.css</exclude>
							<exclude>**/*.psd</exclude>
							<exclude>**/*.mp4</exclude>
							<exclude>**/*.csv</exclude>
							<exclude>**/*.svg</exclude>
							<exclude>**/*.ini</exclude>
							<exclude>**/*.properties</exclude>
							<exclude>**/*.uml</exclude>
							<exclude>**/*.umlcd</exclude>
							<exclude>**/*.eot</exclude>
							<exclude>**/*.ttf</exclude>
							<exclude>**/*.woff</exclude>
							<exclude>**/grafana-1.9.1/**/</exclude>
						</excludes>
						<useDefaultExcludes>true</useDefaultExcludes>
						<strictCheck>true</strictCheck>
						<failIfMissing>true</failIfMissing>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>format</goal>
							</goals>
							<!-- don't execute this plugin automatically -> need to be invoked 
								explicitly: mvn license:[goal] [goal] := check, format or remove -->
							<phase>validate</phase>
						</execution>
					</executions>
				</plugin>

				<!-- Source Plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>${maven-source-plugin.version}</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- Javadoc Plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven-javadoc-plugin.version}</version>
					<executions>
						<execution>
							<id>attach-javadocs</id>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<!-- 2.20 not working -->
					<version>2.19.1</version>
					<configuration>
						<argLine>-ea</argLine>
					</configuration>
				</plugin>
				<!-- Release Plugin -->
				<!-- Usage: 1. mvn release:prepare -Prelease-prepare 2. mvn release:perform 
					-Dgoals'deploy -f src/pom.xml' NOTE: unfortunately the attribute pomFileName 
					is ignored in mvn 3.0.5 and/or release-plugin version 2.5.1 so using profile 
					-Prelease-perform isn't working yet ... alternatively (with dryRun): mvn 
					release:prepare -Prelease-prepare -DdryRun=true mvn release:clean -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.5.3</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<!-- Use this profile to generate license header -> usage: mvn -Pgenerate-license-header -->
		<profile>
			<id>license</id>
			<build>
				<defaultGoal>validate</defaultGoal>
				<plugins>
				    <!-- 
					<plugin>
						<groupId>com.github.goldin</groupId>
						<artifactId>find-maven-plugin</artifactId>
						<version>0.2.5</version>
						<executions>
							<execution>
								<id>find-notice-file</id>
								<configuration>
									<propertyName>license.header</propertyName>
									<file>../extra/license/header.txt</file>
								</configuration>
								<goals>
									<goal>find</goal>
								</goals>
								<phase>validate</phase>
							</execution>
						</executions>
					</plugin>
					-->
					<plugin>
						<groupId>com.mycila</groupId>
						<artifactId>license-maven-plugin</artifactId>
						<configuration>
					        <header>../extra/license/header.txt</header>
					    </configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- Use this profile to format src files -> usage: mvn -Pformat-src-files -->
		<profile>
			<id>format</id>
			<build>
				<defaultGoal>validate</defaultGoal>
				<plugins>
				<!-- 
					<plugin>
						<groupId>com.github.goldin</groupId>
						<artifactId>find-maven-plugin</artifactId>
						<version>0.2.5</version>
						<executions>
							<execution>
								<id>find-formatter-file</id>
								<configuration>
									<propertyName>format.file</propertyName>
									<file>extra/eclipse-formatter/ogema-eclipse-formatter.xml</file>
								</configuration>
								<goals>
									<goal>find</goal>
								</goals>
								<phase>validate</phase>
							</execution>
						</executions>
					</plugin>
					-->
					<plugin>
						<groupId>com.googlecode.maven-java-formatter-plugin</groupId>
						<artifactId>maven-java-formatter-plugin</artifactId>
						<configuration>
					        <!-- <configFile>extra/eclipse-formatter/ogema-eclipse-formatter.xml</configFile>-->
					        <format.file>extra/eclipse-formatter/ogema-eclipse-formatter.xml</format.file>
					    </configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- Use this profile to install/deploy a project with sources and javadocs. 
			usage: mvn -Pgenerate-sources-and-javadocs deploy -->
		<profile>
			<id>generate-sources-and-javadocs</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
					</plugin>
					<!-- Javadoc Plugin -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- 
			turn off strict mode: missing return and param documentation does not lead to build errors 
			required for Java 8 Javadoc generation
		-->	
<!-- fails on old Bamboo version: https://jira.atlassian.com/browse/BAM-13908  -->
<!-- 
		<profile>
	      <id>jdk8</id>
	      <activation>
	        <jdk>[1.8,)</jdk>
	      </activation>
	      <properties>
	        <maven.javadoc.failOnError>false</maven.javadoc.failOnError>
	      </properties>
	    </profile>
-->
		<!-- maven-release-plugin profiles -->
		<!-- Usage: 1. mvn release:prepare -Prelease-prepare 2. mvn release:perform 
			-Dgoals'deploy -f src/pom.xml' -->
		<profile>
			<id>release-prepare</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-release-plugin</artifactId>
						<configuration>
							<arguments>-DskipTests</arguments>
							<preparationGoals>clean install</preparationGoals>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>release-perform</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-release-plugin</artifactId>
						<configuration>
							<pomFileName>src/pom.xml</pomFileName>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
        <profile>
            <id>java7</id><!-- java versions < 9 -->
            <activation>
                <!--
                note: not using <jdk> due to a bug in our ancient ci server
                    <jdk>[1.7,1.9)</jdk>
                -->
                <file>
                    <missing>${java.home}/jmods</missing>
                </file>
            </activation>
            <properties>
                <surefire-args>
                    -ea
                </surefire-args>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <argLine>
                                ${surefire-args}
                            </argLine>
                            <trimStackTrace>false</trimStackTrace>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>java9</id><!-- java versions 9 & 10  -->
            <activation>
                <jdk>[9,10]</jdk>
            </activation>
            <properties>
                <surefire-args>
                    -ea
                    --illegal-access=warn
                    --add-opens=java.base/jdk.internal.loader=ALL-UNNAMED
                    --add-modules java.xml.bind,java.xml.ws.annotation
                </surefire-args>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <argLine>
                                ${surefire-args}
                            </argLine>
                            <trimStackTrace>false</trimStackTrace>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>java11+</id>
            <activation>
                <jdk>[11,)</jdk>
            </activation>
            <properties>
                <surefire-args>
                    -ea
                    --illegal-access=warn
                    --add-opens=java.base/jdk.internal.loader=ALL-UNNAMED
                </surefire-args>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <argLine>
                                ${surefire-args}
                            </argLine>
                            <trimStackTrace>false</trimStackTrace>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
	</profiles>
</project>
